/***** ========= Â∞èÂ∑•ÂÖ∑ ========= *****/
const pick = arr => arr[Math.floor(Math.random() * arr.length)];
const $ = sel => document.querySelector(sel);
const $$ = sel => [...document.querySelectorAll(sel)];

/***** ========= ÁãÄÊÖã ========= *****/
let CURRENT = { profileKey: 'lulu', qa: [], words: [] };
// INLINE_MODE: 0=Èö±Ëóè, 1=Âè™È°ØÁ§∫ÊèêÁ§∫(Ë©ûÊÄß+Ë¶èÂâá), 2=È°ØÁ§∫ÂÆåÊï¥Ëß£Á≠î
let INLINE_MODE = 0;

/***** ========= Âª∂‰º∏‰æãÂè•ÔºàÂèØËá™Ë°åÊì¥ÂÖÖÔºâ ========= *****/
const EXPLAINS = {
  run: { examples: [
    { en: "run fast", zh: "Ë∑ëÂæàÂø´" },
    { en: "run to school", zh: "Ë∑ëÂéªÂ≠∏Ê†°" }
  ]},
  patience: { examples: [
    { en: "have patience in class", zh: "‰∏äË™≤Ë¶ÅÊúâËÄêÂøÉ" },
    { en: "show patience with homework", zh: "Â∞ç‰ΩúÊ•≠ÊúâËÄêÂøÉ" }
  ]},
  defeat: { examples: [
    { en: "defeat the other team", zh: "ÊâìÊïóÂ∞çÊâã" },
    { en: "defeat a bad habit", zh: "ÂÖãÊúçÂ£ûÁøíÊÖ£" }
  ]},
  temper: { examples: [
    { en: "lose one‚Äôs temper", zh: "ÁôºËÑæÊ∞£" },
    { en: "control your temper", zh: "ÊéßÂà∂ËÑæÊ∞£" }
  ]},
  complain: { examples: [
    { en: "complain about the noise", zh: "Êä±ÊÄ®Âô™Èü≥" },
    { en: "complain to the teacher", zh: "ÂêëËÄÅÂ∏´Êä±ÊÄ®" }
  ]},
  remember: { examples: [
    { en: "remember to bring your book", zh: "Ë®òÂæóÂ∏∂Êõ∏" },
    { en: "remember the rule", zh: "Ë®òÂæóË¶èÂâá" }
  ]},
  encourage: { examples: [
    { en: "encourage kids to try", zh: "ÈºìÂãµÂ≠©Â≠êÂòóË©¶" },
    { en: "give words of encouragement", zh: "ÈºìÂãµÁöÑË©±" }
  ]},
  distinguish: { examples: [
    { en: "distinguish A from B", zh: "ÂàÜËæ®AËàáB" },
    { en: "hard to distinguish", zh: "Èõ£‰ª•ÂàÜËæ®" }
  ]},
  achieve: { examples: [
    { en: "achieve a goal", zh: "ÈÅîÊàêÁõÆÊ®ô" },
    { en: "achieve success", zh: "Áç≤ÂæóÊàêÂäü" }
  ]},
  command: { examples: [
    { en: "give a command", zh: "‰∏ãÈÅîÂëΩ‰ª§" },
    { en: "follow the command", zh: "ÈÅµÂÆàÂëΩ‰ª§" }
  ]},
  figured: { examples: [
    { en: "figure out the answer", zh: "ÊÉ≥Âá∫Á≠îÊ°à" },
    { en: "finally figure out", zh: "ÁµÇÊñºÊÉ≥ÈÄö" }
  ]}
};

/* =============== Tabs =============== */
function initTabs() {
  $('#tab-lulu')?.addEventListener('click', () => switchProfile('lulu'));
  $('#tab-sherry')?.addEventListener('click', () => switchProfile('sherry'));
  switchProfile('lulu');
}
function switchProfile(key) {
  CURRENT.profileKey = key;
  $('#tab-lulu').classList.toggle('active', key === 'lulu');
  $('#tab-sherry').classList.toggle('active', key === 'sherry');
  renderLessonList();
}

/* =============== Lessons =============== */
function renderLessonList() {
  const group = PROFILES[CURRENT.profileKey].group;
  const box = $('#lessonList');
  const html = Object.entries(LESSONS)
    .filter(([, obj]) => obj.group === group)
    .map(([id, obj]) => {
      const wordsHtml = (obj.words || []).map(w => {
        const zh = SIMPLE_TRANSLATE[w] || '';
        const pos = POS[w] || '';
        const dup = DUP.includes(w);
        return `
          <div class="word-card">
            <div class="word-en">${w}</div>
            ${dup ? '<span class="dup-star">*</span>' : ''}
            <div class="word-pos">${pos}</div>
            <div class="word-zh">${zh}</div>
          </div>`;
      }).join('');
      return `<div class="lesson-box">
        <div class="lesson-bar">
          <label class="flex items-center gap-2">
            <input type="checkbox" class="lessonCk" value="${id}" checked />
            <span>${obj.title}</span>
          </label>
          <span class="toggle ml-auto toggle-btn" data-id="${id}">Â±ïÈñã / Êî∂Âêà</span>
        </div>
        <div id="words_${id}" class="word-list hidden">
          ${wordsHtml}
        </div>
      </div>`;
    }).join('');
  box.innerHTML = html;
  $$('.toggle-btn').forEach(btn => {
    btn.addEventListener('click', () =>
      $('#words_' + btn.dataset.id).classList.toggle('hidden')
    );
  });
}
function getSelectedLessons() {
  return $$('.lessonCk:checked').map(el => el.value);
}
function buildWordPool() {
  const pool = {};
  getSelectedLessons().forEach(id => {
    (LESSONS[id]?.words || []).forEach(w => {
      if (BANK[w]) pool[w] = BANK[w];
    });
  });
  return pool;
}

/* =============== Make QA =============== */
// Èö®Ê©üÊäΩ„Äå10 ÂÄã‰∏çÈáçË§áÂñÆÂ≠ó„ÄçÔºåÊØèÂÄãÂñÆÂ≠óÈö®Ê©üÂèñ easy/medium/hard ÂÖ∂‰∏≠‰∏ÄÂè•
function pickByLevel(entry) {
  if (!entry) return { en: '______', zh: '' };
  // ÂÖÅË®± entry.easy/medium/hard ÊòØÂñÆÁâ©‰ª∂ÊàñÈô£Âàó
  const bucket = v =>
    Array.isArray(v) ? v.filter(x => x && x.en) : (v && v.en ? [v] : []);
  const candidates = [
    ...bucket(entry.easy),
    ...bucket(entry.medium),
    ...bucket(entry.hard),
    ...bucket(entry.extra) // Ëã•‰Ω†Êé°Áî® extra Êì¥ÂÖÖ
  ];
  if (!candidates.length) return { en: '______', zh: '' };
  return pick(candidates);
}
function makeQA(pool, MUST = 10) {
  const vocab = Object.keys(pool);
  if (vocab.length < MUST) {
    alert('ÂèØÁî®ÂñÆÂ≠óÂ∞ëÊñº 10 ÂÄãÔºåË´ãÂ§öÂãæÈÅ∏ÂπæÂÄãË™≤Ê¨°„ÄÇ');
    return [];
  }
  const chosen = [...vocab].sort(() => Math.random() - 0.5).slice(0, MUST);
  return chosen.map(w => [w, pickByLevel(pool[w])]);
}

/* =============== Render =============== */
function formatWordBank(words) {
  return `<div class="bank-grid">${words
    .sort()
    .map(w => `<div class="bank-chip" data-word="${w}">${w}</div>`)
    .join('')}</div>`;
}
function renderQA() {
  const qList = $('#questionList'),
        aList = $('#answerList');
  qList.innerHTML = '';
  aList.innerHTML = '';

  CURRENT.qa.forEach(([ans, tpl], i) => {
    const li = document.createElement('li');
    li.innerHTML = tpl.en.replace(
      '______',
      `<input id="q_${i}" class="answer" type="text" />`
    );
    qList.appendChild(li);

    const ai = document.createElement('li');
    ai.innerHTML = `<span class="keyword">${ans}</span> ‚Äî ${tpl.zh}`;
    aList.appendChild(ai);
  });

  const words = CURRENT.qa.map(([w]) => w);
  $('#wordBank').innerHTML = formatWordBank(words);

  // ÈáçÁΩÆ inline ÁãÄÊÖãËàáÊåâÈàïÊñáÂ≠ó
  INLINE_MODE = 0;
  updateInlineButton();

  // bank ÈªûË≤ºÁ≠îÊ°àÂà∞ÁÑ¶ÈªûËº∏ÂÖ•Ê°Ü
  let currentInput = null;
  $$('#questionList input.answer').forEach(inp =>
    inp.addEventListener('focus', () => (currentInput = inp))
  );
  $('#wordBank').addEventListener('click', e => {
    const chip = e.target.closest('.bank-chip');
    if (!chip || !currentInput) return;
    currentInput.value = chip.dataset.word;
  });

  $('#answerPanel').classList.add('hidden');
  $('#scoreBox').innerHTML = '';
}

/***** ========= ÊâπÊîπ & ÂàÜÊï∏ ========= *****/
function buildStars(c,t){return '‚òÖ'.repeat(Math.round(c/t*5))+'‚òÜ'.repeat(5-Math.round(c/t*5));}
function praise(c,t){ if(c===t) return 'Â§™Ê£í‰∫ÜÔºÅÂ∞èÂ§©Êâç üèÜ'; if(c>=t*0.8) return 'Â•ΩÂé≤ÂÆ≥ÔºÅÂ∑Æ‰∏ÄÈªûÂ∞±ÊªøÂàÜ üåü'; if(c>=t*0.5) return '‰∏çÈåØÂì¶ÔΩûÁπºÁ∫åÂä†Ê≤π üí™'; return 'Ê≤íÈóú‰øÇÔºå‰∏ãÊ¨°ÊúÉÊõ¥Â•Ω üçÄ'; }
function gradeSheet(){
  let c=0; CURRENT.qa.forEach(([ans],i)=>{const el=$(`#q_${i}`); if(!el)return;
    const ok=(el.value||'').trim().toLowerCase()===ans.toLowerCase();
    el.classList.remove('correct','wrong'); el.classList.add(ok?'correct':'wrong'); if(ok)c++;});
  const t=CURRENT.qa.length;
  $('#scoreBox').innerHTML=`<div><span style="font-weight:700;">ScoreÔºö${c} / ${t}</span>
    <span style="margin-left:.4rem;">${buildStars(c,t)}</span></div>
    <div style="color:#0369a1;">${praise(c,t)}</div>`;
}

/***** ========= È°å‰∏ãÊèêÁ§∫ / Ëß£Á≠î ========= *****/
// Ë¶èÂâáÂûãÁ∑öÁ¥¢ÔºàÂè•ÂûãÂÅµÊ∏¨Ôºâ
function inferPOSHint(en){
  const s = en.replace(/\s+/g,' ').trim();
  if (/^(?:The|This|That|A|An)\s+\w+(?:\s+\w+)?\s+______\s+\b(in|on|at|with|to|from|over|under|into|onto|through|across|behind|beside|near|around|before|after|by|for)\b/i.test(s))
    return '‰∏ªË©û + ÂãïË©û + ‰ªãÁ≥ªË©ûÁâáË™û ‚Üí ÈÄöÂ∏∏ÊòØ„ÄåÂãïË©û„Äç„ÄÇ';
  if (/^(We|I|They|He|She|It)\s+______\b/i.test(s))
    return '‰∏ªË©û + ÂãïË©û ‚Üí ÈÄöÂ∏∏ÊòØ„ÄåÂãïË©û„Äç„ÄÇ';
  if (/\bto\s+______\b/i.test(s))
    return 'to + ÂéüÂΩ¢ÂãïË©û ‚Üí Â°´„ÄåÂãïË©ûÂéüÂΩ¢„Äç„ÄÇ';
  if (/\b(can|will|should|must|may|might|could|would|shall)\s+______\b/i.test(s))
    return 'Âä©ÂãïË©ûÂæåÊé•ÂéüÂΩ¢ ‚Üí Â°´„ÄåÂãïË©ûÂéüÂΩ¢„Äç„ÄÇ';
  if (/\b(a|an|the)\s+______\s+(?!to\b|that\b|who\b|which\b|whom\b|where\b|when\b)\w+\b/i.test(s))
    return 'a/an + ______ + ÂêçË©û ‚Üí Â§öÂçäÊòØ„ÄåÂΩ¢ÂÆπË©û„Äç„ÄÇ';
  if (/\b(a|an|the)\s+\w*(?:ous|ful|able|ible|al|ish|ic|ive|less|y)\s+______\b/i.test(s))
    return 'a/an + ÂΩ¢ÂÆπË©û + ______ ‚Üí Â§öÂçäÊòØ„ÄåÂêçË©û„Äç„ÄÇ';
  if (/\b(a|an|the)\s+______(?:\s+(to|that|who|which|whom|where|when)\b|\b|[.?!,;])/i.test(s))
    return 'a/an + ______ÔºàÂè•Êú´/Êé•Èóú‰øÇË©ûÔºâ‚Üí Â§öÂçäÊòØ„ÄåÂêçË©û„Äç„ÄÇ';
  if (/\b(is|am|are|was|were|feel|feels|felt|seem|seems|look|looks|looked|sound|sounds)\s+______\b/i.test(s))
    return 'be/ÊÑüË¶∫/ÈÄ£Áπ´ÂãïË©û + ______ ‚Üí Â§öÂçäÊòØ„ÄåÂΩ¢ÂÆπË©û„Äç„ÄÇ';
  if (/\band\s+______\b/i.test(s))
    return 'and + ______ ‚Üí ËàáÂâçË©ûÊÄß‰∏ÄËá¥„ÄÇ';
  return '‰æùÊñáÊÑèÂà§Êñ∑Ë©ûÊÄßÔºåÊ≥®ÊÑèÂâçÂæåÊñáÁ∑öÁ¥¢„ÄÇ';
}
function renderExamples(word){
  const data = EXPLAINS[word];
  if (!data) return '';
  if (Array.isArray(data.examples) && data.examples.length){
    const lis = data.examples.map(ex => `<li>${ex.en}${ex.zh ? `Ôºà${ex.zh}Ôºâ` : ''}</li>`).join('');
    return `<ul class="example-list">${lis}</ul>`;
  }
  return '';
}

// ‰æù INLINE_MODE Ê∏≤ÊüìÊèêÁ§∫/Ëß£Á≠îÔºõÊèêÁ§∫ÈöéÊÆµÊúÉÂêåÊôÇÈ°ØÁ§∫„ÄåÂ≠óÂÖ∏Ë©ûÊÄß POS„Äç
function renderInlineBlocks(){
  const list = $('#questionList');
  list.querySelectorAll('.inline-ans').forEach(div => div.remove());
  if (INLINE_MODE === 0) return;

  CURRENT.qa.forEach(([ans, tpl], i) => {
    const li = list.children[i];
    if (!li) return;

    const user = ($(`#q_${i}`)?.value || '').trim();
    const ok = user && user.toLowerCase() === ans.toLowerCase();

    const zhWord = SIMPLE_TRANSLATE?.[ans] ? SIMPLE_TRANSLATE[ans] : '';
    const posDict = (typeof POS !== 'undefined' && POS?.[ans]) ? POS[ans] : ''; // Áõ¥Êé•ËÆÄÂèñ‰Ω†ÁöÑ POS Â≠óÂÖ∏
    const posRule = inferPOSHint(tpl.en);
    const examplesHTML = renderExamples(ans);

    const div = document.createElement('div');
    div.className = 'inline-ans' + (INLINE_MODE === 2 ? (' ' + (ok ? 'correct' : 'wrong')) : '');

    if (INLINE_MODE === 1) {
      // ÈöéÊÆµ 1ÔºöÂè™È°ØÁ§∫„ÄåË©ûÊÄßÊèêÁ§∫„ÄçÔºàPOS + Ë¶èÂâáÔºâ
      div.innerHTML = `
        ${posDict ? `<div class="exp-line">üè∑Ô∏è <b>Â≠óÂÖ∏Ë©ûÊÄßÔºö</b>${posDict}</div>` : ''}
        <div class="exp-line">üìñ <b>Âè•ÂûãÁ∑öÁ¥¢Ôºö</b>${posRule}</div>
      `;
    } else {
      // ÈöéÊÆµ 2ÔºöÈ°ØÁ§∫ÂÆåÊï¥Ëß£Á≠î + Ë©ûÊÄßÊèêÁ§∫ÔºàPOS + Ë¶èÂâáÔºâ+ Âª∂‰º∏‰æãÂè•
      div.innerHTML = `
        <div class="exp-line">‚úÖ <b>Á≠îÊ°àÔºö</b>
          <span class="keyword ${ok?'correct':''}">${ans}</span>${zhWord?`Ôºà${zhWord}Ôºâ`:''}
          ‚Äî ${tpl.zh}
        </div>
        ${posDict ? `<div class="exp-line">üè∑Ô∏è <b>Â≠óÂÖ∏Ë©ûÊÄßÔºö</b>${posDict}</div>` : ''}
        <div class="exp-line">üìñ <b>Âè•ÂûãÁ∑öÁ¥¢Ôºö</b>${posRule}</div>
        ${examplesHTML ? `
          <div class="exp-line exp-examples">
            <span class="exp-label">üåü <b>Âª∂‰º∏‰æãÂè•Ôºö</b></span>
            ${examplesHTML}
          </div>` : ''}
      `;
    }

    li.appendChild(div);
  });
}

// ÊåâÈàïÊñáÂ≠ó‰æùÁãÄÊÖãÊõ¥Êñ∞
function updateInlineButton(){
  const btn = $('#inlineAnsBtn');
  if (!btn) return;
  if (INLINE_MODE === 0) btn.textContent = 'üí° ÊèêÁ§∫';
  else if (INLINE_MODE === 1) btn.textContent = 'üîç Ëß£Á≠î';
  else btn.textContent = 'üôà Êî∂Ëµ∑';
}
function cycleInlineMode(){
  INLINE_MODE = (INLINE_MODE + 1) % 3; // 0 -> 1 -> 2 -> 0
  renderInlineBlocks();
  updateInlineButton();
}

/***** ========= Áî¢Áîü ========= *****/
function generate(){
  const pool = buildWordPool();
  if(!Object.keys(pool).length){ alert('Ë´ãÂÖàÂãæÈÅ∏Ë™≤Ê¨°'); return; }
  CURRENT.qa = makeQA(pool, 10);  // Âõ∫ÂÆö 10 È°å
  if (CURRENT.qa.length === 0) return;
  renderQA();
  window.scrollTo({top:$('#output').offsetTop,behavior:'smooth'});
}

/***** ========= Init ========= *****/
window.addEventListener('DOMContentLoaded',()=>{
  if (typeof PROFILES==='undefined' || typeof LESSONS==='undefined' || typeof BANK==='undefined') {
    console.error('lessons.js Êú™ËºâÂÖ•ÊàñÁµêÊßã‰∏çÁ¨¶'); return;
  }
  initTabs();
  $('#generateBtn').addEventListener('click',generate);
  $('#printBtn')?.addEventListener('click',()=>window.print());
  $('#gradeBtnSheet').addEventListener('click',gradeSheet);
  $('#inlineAnsBtn').addEventListener('click',cycleInlineMode);
  updateInlineButton();
});
